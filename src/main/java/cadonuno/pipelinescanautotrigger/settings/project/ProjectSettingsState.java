package cadonuno.pipelinescanautotrigger.settings.project;import cadonuno.pipelinescanautotrigger.settings.credentials.CredentialsTypeEnum;import cadonuno.pipelinescanautotrigger.settings.global.ApplicationSettingsState;import com.google.common.base.Strings;import com.intellij.openapi.components.PersistentStateComponent;import com.intellij.openapi.components.State;import com.intellij.openapi.components.Storage;import com.intellij.openapi.project.Project;import com.intellij.util.xmlb.XmlSerializerUtil;import org.jetbrains.annotations.NotNull;import org.jetbrains.annotations.Nullable;import java.io.File;@State(        name = "cadonuno.pipelinescanautotrigger.settings.ProjectSettingsState",        storages = {@Storage("PipelineAutoTrigger-project.xml")})public class ProjectSettingsState implements PersistentStateComponent<ProjectSettingsState> {    private String fileToScan = "./target/<file_to_scan>.war";    private String buildCommand = "mvn clean install";    private String baselineFile = "<results.json>";    private String moduleSelection = "";    private boolean isEnabled = false;    private boolean shouldScanOnPush = false;    public ProjectSettingsState() {    }    @Override    public @Nullable ProjectSettingsState getState() {        return this;    }    @Override    public void loadState(@NotNull ProjectSettingsState state) {        XmlSerializerUtil.copyBean(state, this);    }    public static ProjectSettingsState getInstance(Project project) {        return project.getService(ProjectSettingsState.class);    }    public String getFileToScan() {        return fileToScan;    }    public void setFileToScan(String fileToScan) {        this.fileToScan = fileToScan;    }    public String getBaselineFile() {        return baselineFile;    }    public void setBaselineFile(String baselineFile) {        this.baselineFile = baselineFile;    }    public String getBuildCommand() {        return buildCommand;    }    public void setBuildCommand(String buildCommand) {        this.buildCommand = buildCommand;    }    public boolean isEnabled() {        return isEnabled;    }    public void setEnabled(boolean enabled) {        isEnabled = enabled;    }    public boolean isShouldScanOnPush() {        return shouldScanOnPush;    }    public void setShouldScanOnPush(boolean shouldScanOnPush) {        this.shouldScanOnPush = shouldScanOnPush;    }    public String getValidationErrors(ApplicationSettingsState applicationSettingsState, Project project) {        String errors = "";        if (applicationSettingsState.getCredentialsType() == null)        {            errors = addErrorMessageIfFieldIsNullOrEmpty(null, "'Where to Store Credentials'", errors);        }        else if (applicationSettingsState.getCredentialsType() == CredentialsTypeEnum.CredentialsFile)        {            errors = addErrorMessageIfFieldIsNullOrEmpty(applicationSettingsState.getCredentialsProfileName(), "When using a credentials file, 'Credentials profile'", errors);        }        else if (applicationSettingsState.getCredentialsType() == CredentialsTypeEnum.LiteralCredentials)        {            errors = addErrorMessageIfFieldIsNullOrEmpty(applicationSettingsState.getApiId(), "When storing credentials in the IDE, 'API ID'", errors);            errors = addErrorMessageIfFieldIsNullOrEmpty(applicationSettingsState.getApiKey(), "When storing credentials in the IDE, 'API Key'", errors);        }        errors = addErrorMessageIfFieldIsNullOrEmpty(fileToScan, "File to scan", errors);        if (!Strings.isNullOrEmpty(baselineFile) && !(new File(project.getBasePath(), baselineFile.trim()).exists()))        {            errors = addErrorMessage("Unable to read baseline file at '" + baselineFile + "'. Make sure it exists and can be read by IntelliJ", errors);        }        errors = addErrorMessageIfProxyIssues(applicationSettingsState, errors);        if (!errors.isEmpty())        {            return "Scan is not properly configured:" + errors + "\n\nScans can be configured under File>Settings>Veracode Pipeline Scan";        }        return null;    }    private String addErrorMessage(String message, String currentErrors) {        return currentErrors + "\n    - " + message;    }    private String addErrorMessageIfFieldIsNullOrEmpty(String fieldToCheck, String message, String currentErrors) {        if (Strings.isNullOrEmpty(fieldToCheck))        {            return addErrorMessage(message + " must be set", currentErrors);        }        return currentErrors;    }    private String addErrorMessageIfProxyIssues(ApplicationSettingsState applicationSettingsState, String errors) {        if ((!Strings.isNullOrEmpty(applicationSettingsState.getProxyHost())                || !Strings.isNullOrEmpty(applicationSettingsState.getProxyPort())                || !Strings.isNullOrEmpty(applicationSettingsState.getProxyUsername())                || !Strings.isNullOrEmpty(applicationSettingsState.getProxyPassword()))                && (Strings.isNullOrEmpty(applicationSettingsState.getProxyHost())                || Strings.isNullOrEmpty(applicationSettingsState.getProxyPort()))) {            errors = addErrorMessage("To enable proxy usage, you need to set both Host and Port", errors);        }        return errors;    }    public String getModuleSelection() {        return moduleSelection;    }    public void setModuleSelection(String moduleSelection) {        this.moduleSelection = moduleSelection;    }}